<?php

/**
 * @file
 * Install file for Swift Pics module.
 */

/**
 * Implements hook_install().
 */
function swift_pics_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // Define the node type as an associative array.
  $swift_pics = array(
    'type' => 'swift_pics',
    'name' => $t('Swift Pics'),
    'base' => 'node_content',
    'description' => $t('Use <em>Swift Pics</em> for your quick photo gallery content.'),
    'title_label' => $t('Gallery Title'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  $content_type = node_type_set_defaults($swift_pics);

  // Add a body field and set the body label immediately.
  node_add_body_field($content_type, $t('Gallery Description'));

  // Load the instance definition for our content type's body.
  $body_instance = field_info_instance('node', 'body', 'swift_pics');

  // Add the default view mode to the body instance display by
  // instructing the body to display as a summary.
  $body_instance['display']['default'] = array(
    'label' => 'hidden',
    'type' => 'text_summary_or_trimmed',
  );

  // Save our changes to the body field instance.
  field_update_instance($body_instance);

  // Save the content type.
  node_type_save($content_type);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_swift_pics_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for fields.
  foreach (_swift_pics_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $swift_pics['type'];
    field_create_instance($instance);
  }
}
/**
 * Implements hook_uninstall().
 */
function swift_pics_uninstall() {
  // Gather all the Swift Pics content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'swift_pics'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once.
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_swift_pics_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the swift_pics
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'swift_pics');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type.
  node_type_delete('swift_pics');

  // Purge all field infromation.
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return array
 *   An associative array specifying fields to add to the new node type.
 */
function _swift_pics_installed_fields() {
  $t = get_t();
  return array(
    'swift_pics_path' => array(
      'field_name' => 'swift_pics_path',
      'cardinality' => 1,
      'locked'  => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 255,
      ),
    ),
    'swift_pics_images' => array(
      'field_name' => 'swift_pics_images',
      'type'       => 'image',
      'cardinality' => -1,
      'locked'  => 1,
    ),
    'swift_pics_reset' => array(
      'field_name' => 'swift_pics_reset',
      'type'  => 'list_boolean',
      'cardinality' => 1,
      'locked' => 1,
      'settings' => array(
        'allowed_values' => array(
          0 => 'No',
          1 => 'Yes',
        ),
        'allowed_values_function' => '',
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return array
 *   An associative array specifying instances to add to the new node type.
 */
function _swift_pics_installed_instances() {
  $t = get_t();
  return array(
    'swift_pics_path' => array(
      'field_name' => 'swift_pics_path',
      'label'       => $t('Image Directory/Folder Path'),
      'description'		=> $t('The directory should exist in the "sites/default/files" directory. No leading or trailing "/".'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'settings' => array(),
          'type' => 'hidden',
        ),
      ),
    ),
    'swift_pics_reset' => array(
      'field_name' => 'swift_pics_reset',
      'label'       => $t('Reset Gallery To Folder Scan'),
      'description'		=> $t('Check this to reset this gallery\'s images to the images in the folder path.'),
      'widget'      => array(
        'type'    => 'options_onoff',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'settings' => array(),
          'type' => 'hidden',
        ),
      ),
    ),
    'swift_pics_images' => array(
      'field_name'  => 'swift_pics_images',
      'label'       => $t('Gallery Images'),
      'description'	=> $t('Ignore this field if an "Image Directory Path" was set above. This field will be populated by the images in that directory.'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'module' => 'image',
          'settings' => array(
            'image_link' => 'file',
            'image_style' => 'thumbnail',
          ),
          'type' => 'image',
        ),
      ),
    ),
  );
}
