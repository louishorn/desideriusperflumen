<?php 
/**
 * @file
 * Module file for Swift Pics module.
 */


/**
 * Implements hook_node_validate().
 *
 * Form validation for swift_pics node type updates.
 */
function swift_pics_node_validate($node, $form, &$form_state) {
  // If a Swift Pics Path value is set.
  if (isset($node->swift_pics_path[$node->language][0]['value'])) {
    // Create complete path to point to public directory.
    $directory = 'public://' . $node->swift_pics_path[$node->language][0]['value'];
    // If that directory does not exist or is not writable by drupal.
    if (file_prepare_directory($directory) == FALSE) {
      form_set_error('swift_pics_path', t('The path entered was not a valid directory in sites/default/files/. Please enter a valid path.'));
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function swift_pics_node_presave($node) {
  // If the node is of type swift_pics
  if ($node->type == 'swift_pics') {
    // If a path is set and there are no images in the swift_pics_images field.
    if (isset($node->swift_pics_path[$node->language][0]['value'])) {
      // If swift_pics_images field has no values
      // or swift_pics_reset checkbox is selected.
      if ((!isset($node->swift_pics_images[$node->language][0])) ||
        ($node->swift_pics_reset[$node->language][0]['value'] == '1')) {
        // Construct Drupal path to directory to scan.
        $directory = 'public://' . $node->swift_pics_path[$node->language][0]['value'];

        // Scan directory for files at current level only
        // resurse can be changed to TRUE to scan sub directories as well
        // but should be used with care.
        $files = file_scan_directory($directory, '/^.*\.(png|gif|jpg|jpeg)$/i', array('recurse' => FALSE));

        // Will hold final image gallery array.
        $swift_pics_images = array();

        // For each file that is found from the scan.
        foreach ($files as $file) {
          // Find and load managed file if it exists
          // Only add to managed files if the image doesn't exist there.
          if (swift_pics_get_managed_file($file->uri) == FALSE) {
            // Image isn't managed and needs to be managed.
            // Load/Generate Image file type.
            $image_file_object = image_load($file->uri);

            // Check for problems loading the file.
            if ($image_file_object == FALSE) {
              // The file did not load correctly. Set error message.
              drupal_set_message(t('There was a problem loading %file. This file was skipped.', array('%file' => $file->uri)), 'error');
              // Flag so it's not added to the image array.
              $file->status = NULL;
            }
            else {
              // The file loaded fine.
              // Build remaining vars for managed file type.
              $file->status = FILE_STATUS_PERMANENT;
              $file->filemime = $image_file_object->info['mime_type'];

              // Save Managed file for image.
              file_save($file);
            }
          }

          // If the image loaded OK.
          if (!is_null($file->status)) {
            // The managed image file should now exist
            // It will now be added to the Image gallery array.
            $file_object = swift_pics_get_managed_file($file->uri);
            $swift_pics_images[]['fid'] = $file_object->fid;
          }
        }
        // If files are present in the gallery array to be loaded.
        if (!empty($files)) {
          // Add Image File ID array to Nodes Image Field.
          $node->swift_pics_images[$node->language] = $swift_pics_images;
        }
      }
    }
    // Set swift_pics_reset checkbox back to unchecked.
    $node->swift_pics_reset[$node->language][0]['value'] = '0';
  }
}

/**
 * Utility function to check for and return a managed file.
 *
 * @param string $uri
 *   The URI of the file, like public://test.txt.
 */
function swift_pics_get_managed_file($uri) {
  $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => $uri))->fetchField();
  if (!empty($fid)) {
    $file_object = file_load($fid);
    return $file_object;
  }
  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function swift_pics_views_api() {
  return array('api' => 3.0);
}
